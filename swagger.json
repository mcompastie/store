{
  "swagger": "2.0",
  "info": {
    "title": "Store API",
    "description": "This API onboards vNSFs and NSs in a secure and trusted way. The onboarding process will ensure the provenance is from a trusted source and that the contents integrity can be assured. Once this is achieved the security information is stored for safekeeping and provided upon request so other components can check that the vNSF/NS has not been tampered with since it was onboarded.\n\nAnother relevant feature provided by the Store is the verification done on the vNSF and NS associated descriptors to ensure the instantiation process by an Orchestrator is performed without hassle.\n\n_Please note that consumers are not allowed to edit (`PATCH`), update (`PUT`) or delete (`DELETE`) a resource unless they provide an up-to-date `ETag` for the resource they are attempting to modify. This value, taken from the details (`GET`) request, is mandatory and should be provided in the `If-Match` header_.\n\nAPI version numbering as per http://semver.org/",
    "termsOfService": "my terms of service",
    "contact": {
      "name": "Filipe Ferreira",
      "url": "https://github.com/betakoder"
    },
    "license": {
      "name": "Apache License, Version 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "0.1.0"
  },
  "host": "localhost:6060",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/vnsfs": {
      "get": {
        "summary": "Lists all the vNSFs",
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vnsfs"
              }
            }
          },
          "202": {
            "description": "Request processing. You can retry your request, and when it's finished, you'll get a 200 instead."
          },
          "400": {
            "description": "Bad request. API specific parameters are incorrect or missing."
          },
          "401": {
            "description": "Unauthorised. You're not authorised to access this resource."
          },
          "404": {
            "description": "Not found. The requested resource doesn't exist."
          },
          "500": {
            "description": "Server errors. Our bad!"
          },
          "502": {
            "description": "Third-party unreachable."
          },
          "504": {
            "description": "Timeout. A request to a third-party has taken too long to be served."
          }
        },
        "tags": [
          "vnsfs"
        ],
        "description": "Provides a list of all the onboarded vNSFs along with a brief description for each one."
      },
      "post": {
        "summary": "Triggers the vNSF onboarding process",
        "parameters": [
          {
            "in": "formData",
            "type": "file",
            "name": "package",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Resource created."
          },
          "202": {
            "description": "Request processing. You can retry your request, and when it's finished, you'll get a 200 instead."
          },
          "400": {
            "description": "Bad request. API specific parameters are incorrect or missing."
          },
          "401": {
            "description": "Unauthorised. You're not authorised to access this resource."
          },
          "404": {
            "description": "Not found. The requested resource doesn't exist."
          },
          "500": {
            "description": "Server errors. Our bad!"
          },
          "502": {
            "description": "Third-party unreachable."
          },
          "504": {
            "description": "Timeout. A request to a third-party has taken too long to be served."
          }
        },
        "tags": [
          "vnsfs"
        ],
        "description": "Due to the nature of the process, as it comprises time-consuming operations such as validations and considerable-sized downloads, the submission request is promptly acknowledged and the process continues in the background. Later on, the caller will be notified whether the the operation succeeded or failed.\n\nTo ensure a vNSF can be onboarded, the descriptors provided in the package need to be validated. These descriptors are checked for:\n\n* Syntax errors to prevent incorrect vNSF descriptors.\n* vNSF topology integrity to avoid potential loops or errors such as references to undefined network interfaces.\n\nEvery onboarded vNSF descriptor will be checked for syntax, correctness and completeness issues. With no issues found the next step is to check the defined network topology and ensure inconsistencies such as no unconnected interfaces are present and all links are properly defined. Upon successful validation, the vNSF may proceed with the onboarding process. Any error results in a notification to the Developer stating what is not compliant with the SHIELD requirements.",
        "consumes": [
          "multipart/form-data"
        ]
      }
    },
    "/vnsfs/{vnsfsId}": {
      "get": {
        "summary": "Provides the details on a vNSF",
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "$ref": "#/definitions/vnsfs"
            }
          },
          "202": {
            "description": "Request processing. You can retry your request, and when it's finished, you'll get a 200 instead."
          },
          "400": {
            "description": "Bad request. API specific parameters are incorrect or missing."
          },
          "401": {
            "description": "Unauthorised. You're not authorised to access this resource."
          },
          "404": {
            "description": "Not found. The requested resource doesn't exist."
          },
          "500": {
            "description": "Server errors. Our bad!"
          },
          "502": {
            "description": "Third-party unreachable."
          },
          "504": {
            "description": "Timeout. A request to a third-party has taken too long to be served."
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/vnsfs__id"
          }
        ],
        "tags": [
          "vnsfs"
        ],
        "description": "Provides all the information on the onboarded vNSF."
      },
      "delete": {
        "summary": "Decommissions a vNSF",
        "responses": {
          "200": {
            "description": "Request succeeded."
          },
          "202": {
            "description": "Request processing. You can retry your request, and when it's finished, you'll get a 200 instead."
          },
          "204": {
            "description": "vnsfs document deleted successfully"
          },
          "400": {
            "description": "Bad request. API specific parameters are incorrect or missing."
          },
          "401": {
            "description": "Unauthorised. You're not authorised to access this resource."
          },
          "404": {
            "description": "Not found. The requested resource doesn't exist."
          },
          "500": {
            "description": "Server errors. Our bad!"
          },
          "502": {
            "description": "Third-party unreachable."
          },
          "504": {
            "description": "Timeout. A request to a third-party has taken too long to be served."
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/vnsfs__id"
          },
          {
            "in": "header",
            "name": "If-Match",
            "description": "Current value of the _etag field",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "vnsfs"
        ],
        "description": "Takes a vNSF out of service which prevents it from ever being instantiated again.For a running NS or vNSF a graceful decommission is provided through the schedule of the operation for a later date."
      }
    }
  },
  "definitions": {
    "vnsfs": {
      "type": "object",
      "properties": {
        "registry": {
          "type": "object",
          "properties": {
            "vendor": {
              "type": "string"
            },
            "capabilities": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "vendor",
            "capabilities"
          ]
        },
        "state": {
          "enum": [
            "submitted",
            "sandboxed",
            "onboarded",
            "decommissioned"
          ],
          "type": "string"
        },
        "manifest": {
          "type": "object",
          "properties": {
            "manifest:vnsf": {
              "type": "object",
              "properties": {
                "type": {
                  "enum": [
                    "OSM"
                  ],
                  "type": "string"
                },
                "package": {
                  "type": "string"
                },
                "descriptor": {
                  "type": "string"
                },
                "security_info": {
                  "type": "object",
                  "properties": {
                    "vdu": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "hash": {
                            "type": "string"
                          },
                          "attestation": {
                            "type": "object",
                            "properties": {
                              "somekey": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "somekey"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "hash",
                          "attestation"
                        ]
                      }
                    }
                  },
                  "required": [
                    "vdu"
                  ]
                }
              },
              "required": [
                "type",
                "package",
                "descriptor",
                "security_info"
              ]
            }
          },
          "required": [
            "manifest:vnsf"
          ]
        },
        "descriptor": {
          "type": "string"
        },
        "manifest_file": {
          "type": "string"
        },
        "package": {
          "type": "string"
        },
        "_id": {
          "type": "string",
          "format": "objectid"
        }
      },
      "required": [
        "registry",
        "state",
        "manifest",
        "descriptor"
      ]
    }
  },
  "parameters": {
    "vnsfs__id": {
      "in": "path",
      "name": "vnsfsId",
      "required": true,
      "description": "",
      "type": "string",
      "format": "objectid"
    }
  },
  "tags": [
    {
      "name": "vnsfs"
    }
  ]
}
